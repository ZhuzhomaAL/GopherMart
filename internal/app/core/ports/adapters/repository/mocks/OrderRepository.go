// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"

	order "github.com/ZhuzhomaAL/GopherMart/internal/app/core/domain/order"

	service "github.com/ZhuzhomaAL/GopherMart/internal/app/core/ports/service"

	transaction "github.com/ZhuzhomaAL/GopherMart/internal/app/core/domain/transaction"

	uuid "github.com/gofrs/uuid"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// BatchUpdateOrdersAndBalance provides a mock function with given fields: ctx, orders, transactions
func (_m *OrderRepository) BatchUpdateOrdersAndBalance(ctx context.Context, orders []order.Order, transactions []transaction.Transaction) error {
	ret := _m.Called(ctx, orders, transactions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []order.Order, []transaction.Transaction) error); ok {
		r0 = rf(ctx, orders, transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, _a1, tx
func (_m *OrderRepository) CreateOrder(ctx context.Context, _a1 order.Order, tx bun.IDB) error {
	ret := _m.Called(ctx, _a1, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, order.Order, bun.IDB) error); ok {
		r0 = rf(ctx, _a1, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByStatuses provides a mock function with given fields: ctx, statuses
func (_m *OrderRepository) GetAllByStatuses(ctx context.Context, statuses []string) ([]order.Order, error) {
	ret := _m.Called(ctx, statuses)

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]order.Order, error)); ok {
		return rf(ctx, statuses)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []order.Order); ok {
		r0 = rf(ctx, statuses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, statuses)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUser provides a mock function with given fields: ctx, userID
func (_m *OrderRepository) GetAllByUser(ctx context.Context, userID uuid.UUID) ([]service.OrderInfo, error) {
	ret := _m.Called(ctx, userID)

	var r0 []service.OrderInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]service.OrderInfo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []service.OrderInfo); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.OrderInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBatchByNumbers provides a mock function with given fields: ctx, orderNumbers
func (_m *OrderRepository) GetBatchByNumbers(ctx context.Context, orderNumbers []string) ([]order.Order, error) {
	ret := _m.Called(ctx, orderNumbers)

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]order.Order, error)); ok {
		return rf(ctx, orderNumbers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []order.Order); ok {
		r0 = rf(ctx, orderNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, orderNumbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNumber provides a mock function with given fields: ctx, number, tx
func (_m *OrderRepository) GetByNumber(ctx context.Context, number string, tx bun.IDB) (order.Order, error) {
	ret := _m.Called(ctx, number, tx)

	var r0 order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bun.IDB) (order.Order, error)); ok {
		return rf(ctx, number, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bun.IDB) order.Order); ok {
		r0 = rf(ctx, number, tx)
	} else {
		r0 = ret.Get(0).(order.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bun.IDB) error); ok {
		r1 = rf(ctx, number, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, _a1, tx
func (_m *OrderRepository) UpdateOrder(ctx context.Context, _a1 order.Order, tx bun.IDB) error {
	ret := _m.Called(ctx, _a1, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, order.Order, bun.IDB) error); ok {
		r0 = rf(ctx, _a1, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
