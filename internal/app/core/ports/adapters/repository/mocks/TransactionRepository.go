// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"

	transaction "github.com/ZhuzhomaAL/GopherMart/internal/app/core/domain/transaction"

	uuid "github.com/gofrs/uuid"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: ctx, _a1, tx
func (_m *TransactionRepository) CreateTransaction(ctx context.Context, _a1 transaction.Transaction, tx bun.IDB) error {
	ret := _m.Called(ctx, _a1, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transaction.Transaction, bun.IDB) error); ok {
		r0 = rf(ctx, _a1, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBalanceByUser provides a mock function with given fields: ctx, userID, tx
func (_m *TransactionRepository) GetBalanceByUser(ctx context.Context, userID uuid.UUID, tx bun.IDB) (float64, error) {
	ret := _m.Called(ctx, userID, tx)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bun.IDB) (float64, error)); ok {
		return rf(ctx, userID, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bun.IDB) float64); ok {
		r0 = rf(ctx, userID, tx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bun.IDB) error); ok {
		r1 = rf(ctx, userID, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawalSumByUser provides a mock function with given fields: ctx, userID
func (_m *TransactionRepository) GetWithdrawalSumByUser(ctx context.Context, userID uuid.UUID) (float64, error) {
	ret := _m.Called(ctx, userID)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (float64, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) float64); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithdrawalsByUser provides a mock function with given fields: ctx, userID
func (_m *TransactionRepository) GetWithdrawalsByUser(ctx context.Context, userID uuid.UUID) ([]transaction.Transaction, error) {
	ret := _m.Called(ctx, userID)

	var r0 []transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]transaction.Transaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []transaction.Transaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
